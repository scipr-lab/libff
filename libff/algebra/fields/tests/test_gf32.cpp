#include <gtest/gtest.h>

#include "libff/algebra/fields/binary/gf32.hpp"

namespace libff {

gf32 gf32_mul(const uint32_t &a_val, const uint32_t &b_val)
{
    return gf32(a_val) * gf32(b_val);
}

/* test cases generated by sage/gf32.sage script */

TEST(MultiplicationTest, SageTests) {
    EXPECT_EQ(gf32_mul(0xec71187bLL, 0x3c2b4dc6LL), gf32(0x18a792bdLL));
    EXPECT_EQ(gf32_mul(0xe24186cdLL, 0xc7b13dc2LL), gf32(0x5d8822c4LL));
    EXPECT_EQ(gf32_mul(0x0c053421LL, 0xe357be15LL), gf32(0x9692f4d2LL));
    EXPECT_EQ(gf32_mul(0xd0d42130LL, 0x3e597e24LL), gf32(0xc7ea9d01LL));
    EXPECT_EQ(gf32_mul(0x394b1a86LL, 0x3674def5LL), gf32(0xafa1ca21LL));
    EXPECT_EQ(gf32_mul(0xaf9995cbLL, 0x4c12835bLL), gf32(0x795b61feLL));
    EXPECT_EQ(gf32_mul(0x494cccf7LL, 0x47d58182LL), gf32(0xab95d1beLL));
    EXPECT_EQ(gf32_mul(0x00f6c1e7LL, 0x1dc6cb1eLL), gf32(0x2d4bd0c9LL));
    EXPECT_EQ(gf32_mul(0x81fe4a5fLL, 0xc975aa50LL), gf32(0x6f64a32eLL));
    EXPECT_EQ(gf32_mul(0x6903f854LL, 0x701eca01LL), gf32(0xee8735bbLL));
}

TEST(InverseTest, SimpleTest) {
    for (std::size_t i = 0; i < 10; i++) {
        const gf32 a = gf32::random_element();
        const gf32 a_inv = a.inverse();

        EXPECT_EQ(a*a_inv, gf32(1));
    }
}

}
