#include <gtest/gtest.h>

#include "libff/algebra/fields/binary/gf192.hpp"

namespace libff {

gf192 gf192_mul(const uint64_t &a_val_high, const uint64_t &a_val_mid, const uint64_t &a_val_low,
                const uint64_t &b_val_high, const uint64_t &b_val_mid, const uint64_t &b_val_low)
{
    return gf192(a_val_high, a_val_mid, a_val_low) * gf192(b_val_high, b_val_mid, b_val_low);
}

/* test cases generated by sage/gf192.sage script */

TEST(MultiplicationTest, SageTests) {
    EXPECT_EQ(gf192_mul(0x0cdc30af062ba589LL, 0x8418b817f5caf84cLL, 0x3590e0c94d76b16aLL, 0x4193e34b8241b8b6LL, 0x8d73a6d58a9833adLL, 0xf7903a9c58e4223cLL), gf192(0xedb2d77042f07f3eLL, 0xc223197d04425354LL, 0x601e9baa99e6b2fdLL));
    EXPECT_EQ(gf192_mul(0x56aa86373c498fddLL, 0x81f59dadf3516810LL, 0x657e286088c96142LL, 0x0fe9a9f10ea6b3beLL, 0x614becf0f6981970LL, 0x12356e70b09e27a6LL), gf192(0xcf0642476758587aLL, 0x2ed578d8f170b814LL, 0x0b86792ebec24165LL));
    EXPECT_EQ(gf192_mul(0x5d1bce4867374275LL, 0xf764a67447957a65LL, 0x897bb93561e04d72LL, 0xf507be43450e596cLL, 0x7625671a07a1b127LL, 0xb6f0e7fe834a305fLL), gf192(0x2d43614daf895767LL, 0xa0d43a4a59167a19LL, 0x1d01f4493cf9f6bfLL));
    EXPECT_EQ(gf192_mul(0x23fad70584b9ff24LL, 0x00a7fced16ffa59bLL, 0x7009d6ea6cbc3723LL, 0x5756b56a1d208f91LL, 0xac2c97ebcf121998LL, 0xb4dab96b1454919dLL), gf192(0x0b31e0f4e429e2d8LL, 0x91b61a18bdb18fd4LL, 0x35ce63ac64f58838LL));
    EXPECT_EQ(gf192_mul(0xc1c42adfa999b078LL, 0x633c9cefc089eb74LL, 0x0fd73239d93bd077LL, 0xfae308c406eb08feLL, 0x49bfcd0bd4d96b01LL, 0xf55ab02f9dae69b8LL), gf192(0xecd19c6c59d10edeLL, 0x5c081d84ee58552dLL, 0x598aefe615b5a49aLL));
    EXPECT_EQ(gf192_mul(0xf2e6b1294f40ac62LL, 0x512288f4b06917d3LL, 0xd2c36d17d828d9b4LL, 0x206901073d267fa5LL, 0x9a2789bfb11c03c4LL, 0x1cf009d26ee1f80fLL), gf192(0x68fd98a8545f9688LL, 0x1e6f3c0f65f3b25dLL, 0x75fb9afdb21f1278LL));
    EXPECT_EQ(gf192_mul(0xc78b2478a98afb85LL, 0x579c25544b3ba640LL, 0x7766723a1141eddcLL, 0x1d5e8949c38296e0LL, 0x224aa1e6e025b316LL, 0x84eb9e2187501666LL), gf192(0xd33304755a3790f5LL, 0xd9f5f3be81d6054dLL, 0x742cb900f1d5bcf9LL));
    EXPECT_EQ(gf192_mul(0x75bee645ed32bf73LL, 0xfaaf7393e729adf5LL, 0xe4e8ae96b691f6d2LL, 0x94659c82eed44ed6LL, 0x0d6f1491ffab6313LL, 0x034858f4f1f7b14bLL), gf192(0x998f56abe7e4348fLL, 0xcafb5a359d76233dLL, 0x930bfcefe10d3166LL));
    EXPECT_EQ(gf192_mul(0x9ded3331f7e20e08LL, 0xae8f8592118650dfLL, 0x4105e1bce7fda1a5LL, 0x22677e786437ded8LL, 0xeab6bb9efffe16f2LL, 0xae333a6c2e525a7eLL), gf192(0x981afe97f038b8e7LL, 0x2803fd759a41f4e0LL, 0xf80ac10929fc7e3fLL));
    EXPECT_EQ(gf192_mul(0x13ee2aa2bc56bb9fLL, 0x4b28b4a78b34aed6LL, 0xc9a973387db34f3cLL, 0x5980393a96b7e262LL, 0xbee979d0d3e73491LL, 0x724efc0872e555d7LL), gf192(0xce5179b296413b74LL, 0x90b969c3def4555fLL, 0x2de0b46a441b4738LL));
}

TEST(InverseTest, SimpleTest) {
    const gf192 a = gf192::random_element();
    const gf192 a_inv = a.inverse();

    EXPECT_EQ(a*a_inv, gf192(1));
}

}
